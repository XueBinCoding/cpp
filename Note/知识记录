1.C++11 定义的宏
	__func__ 用于获取当前名字函数的字符串的宏
	__FILE__当前文件路径
	__LINE__当前文本行

2. final 和override 控制
	final用来限制基类虚函数的对应的派生类不能重写该虚函数，从而避免了某些接口被重写覆盖
	override则指定了函数必须重载基类的虚函数，否则编译通不过，这就避免了某些输入名或者原型不匹配等错误的发生。

3.默认的模板参数
	//类模板 C++98就允许，不过定义有要求
	template<typename T1, typename T2 = int>class DefClass1{};      //允许，指定类模板的默认模板参数
	//template<typename T1 = int, typename T2> class DefClass2;     //通不过编译，多个默认模板参数指定默认值时，必须遵守从右向做的原则

	//函数模板 C++11添加
	template<typename T1, typename T2 = int>void DefFunc1(T1 a, T2 b);
	template<typename T1 = int, typename T2>void DefFunc2(T1 a, T2 b); //允许

4 STL 的底层实现原理
	4.1. vector底层数据结构为数组 ，支持快速随机访问 
	4.2. list底层数据结构为双向链表，支持快速增删
	4.3. deque底层数据结构为一个中央控制器和多个缓冲区，支持首尾（中间不能）快速增删，也支持随机访问
	4.4. stack底层一般用list或deque实现，封闭头部即可，不用vector的原因应该是容量大小有限制，扩容耗时
	4.5. queue底层一般用list或deque实现，封闭头部即可，不用vector的原因应该是容量大小有限制，扩容耗时
	（stack和queue其实是适配器,而不叫容器，因为是对容器的再封装）
	4.6. priority_queue     的底层数据结构一般为vector为底层容器，堆heap为处理规则来管理底层容器实现
	4.7. set 底层数据结构为红黑树，有序，不重复
	4.8. multiset 底层数据结构为红黑树，有序，可重复 
	4.9. map底层数据结构为红黑树，有序，不重复
	4.10. multimap底层数据结构为红黑树，有序，可重复
	4.11. hash_set底层数据结构为hash表，无序，不重复
	4.12. hash_multiset 底层数据结构为hash表，无序，可重复 
	4.13. hash_map    底层数据结构为hash表，无序，不重复
	4.14. hash_multimap 底层数据结构为hash表，无序，可重复 
5 deque 的底层实现方式
	deque 使用的是一段段等长的连续空间组成，但是各个空间之前不一定是连续的，并且使用map（不是stl里的map） 进行管理
6 std::move 的功能；
	std::move 的功能是将一个左值引用转化为右值引用。
	
7.C++ 中的迭代器是怎么实现
	各个迭代器的实现方式不一样，基本上是重载操作符与类型别名
	STL通过类型别名的方式实现了对外统一；在不同的容器中类型别名的真实迭代器类型是不一样的，

8.什么是语音VAD功能
	语音端点检测技术，Voice Activity Detection的缩写，该技术的主要任务是从带有噪音的语音中准确的定位语音的开始和结束

9.C++的异常捕获
	https://www.cnblogs.com/zhoug2020/p/10100376.html
10.select 的实现原理
	select会循环遍历它所监测的fd_set（一组文件描述符(fd)的集合）内的所有文件描述符对应的驱动程序的poll函数。
	驱动程序提供的poll函数首先会将调用select的用户进程插入到该设备驱动对应资源的等待队列(如读/写等待队列)，
	然后返回一个bitmask告诉select当前资源哪些可用。当select循环遍历完所有fd_set内指定的文件描述符对应的poll函数后，
	如果没有一个资源可用(即没有一个文件可供操作)，则select让该进程睡眠，一直等到有资源可用为止，进程被唤醒(或者timeout)
	继续往下执行。

11.linux 的内存检测

12.select的原理概述
调用select会发生以下事情：
	1.从用户空间拷贝fd_set到内核空间；
	2.注册回调函数__pollwait；
	3.遍历所有fd，对全部指定设备做一次poll（这里的poll是一个文件操作，它有两个参数，一个是文件fd本身，一个是当设备尚未就绪时调用的回调函数__pollwait，
	这个函数把设备自己特有的等待队列传给内核，让内核把当前的进程挂载到其中）；
	4.当设备就绪时，设备就会唤醒在自己特有等待队列中的【所有】节点，于是当前进程就获取到了完成的信号。poll文件操作返回的是一组标准的掩码，
	其中的各个位指示当前的不同的就绪状态（全0为没有任何事件触发），根据mask可对fd_set赋值；
	5.如果所有设备返回的掩码都没有显示任何的事件触发，就去掉回调函数的函数指针，进入有限时的睡眠状态，再恢复和不断做poll，再作有限时的睡眠，直到其中一个设备有事件触发为止。
	6.只要有事件触发，系统调用返回，将fd_set从内核空间拷贝到用户空间，回到用户态，用户就可以对相关的fd作进一步的读或者写操作了。

13.epoll原理概述
调用epoll_create时，做了以下事情：
	1.内核帮我们在epoll文件系统里建了个file结点；
	2.在内核cache里建了个红黑树用于存储以后epoll_ctl传来的socket；
	3.建立一个list链表，用于存储准备就绪的事件。
调用epoll_ctl时，做了以下事情：
	1.把socket放到epoll文件系统里file对象对应的红黑树上；
	2.给内核中断处理程序注册一个回调函数，告诉内核，如果这个句柄的中断到了，就把它放到准备就绪list链表里。
调用epoll_wait时，做了以下事情：
	观察list链表里有没有数据。有数据就返回，没有数据就sleep，等到timeout时间到后即使链表没数据也返回。而且，
	通常情况下即使我们要监控百万计的句柄，大多一次也只返回很少量的准备就绪句柄而已，
	所以，epoll_wait仅需要从内核态copy少量的句柄到用户态而已。

14.C++11 的日期和时间库chrono
	一些类型
	std::chrono::nanoseconds;
	std::chrono::microseconds;
	std::chrono::milliseconds;
	std::chrono::seconds;
	std::chrono::minutes;
	std::chrono::hours;
	
15.git 撤销git add
	git reset HEAD   <file>//撤销刚才的add操作。如果不指定文件名，则撤销add的所有文件
	git checkout -- <file> 
	
16.打印gdb 所有的堆栈
	thread apply all bt
17. cmake 中添加调试信息
	SET(CMAKE_BUILD_TYPE "Debug")


18.检测内存泄漏
	valgrind --tool=memcheck ./memleak
	valgrind --leak-check=full ./memleak 

19.explicit关键字
	1).explicit关键字只对有一个参数的类构造函数有效
	2).explicit关键字的作用就是防止类构造函数的隐式自动转换.
	
20.template之模板中class与typename区别
	1).两者typename和class在参数类型中没有不同
	2). typename可以使用嵌套依赖类型, 也就是类型可以嵌套使用
	使用参照https://blog.csdn.net/Function_Dou/article/details/84644963

21.C++的多重继承
	多重继承可能产生的问题：
	1.多重继承得到的对象可能拥有不同的地址（使用父类的指针指向子类时，多个父类的指针的值不相同）
	2.多重继承里可能会有重复的成员

22.虚继承
	在多重继承，在多重继承中，如果发生了如：类B继承类A，类C继承类A，类D同时继承了类B和类C。最终在类D中就有了两份类A的成员，
	这在程序中是不能容忍的。当然解决这个问题的方法就是利用虚继承
	class B:virtual public A

23.在指定内存构造对象
	1.placement new
		new(ptr) xxx() ，其中 ptr 是足够容纳所指对象的指针
	2.使用std::allocator 

24.构造函数中的内存分配问题
25.基类是否可以设置为单例模式。

26.C++的where 关键字

27 .linux 下查看库的信息
	方法1：objdump -p ****.a
	

28. objdump 命令
	objdump命令是Linux下的反汇编目标文件或者可执行文件的命令，它以一种可阅读的格式让你更多地了解二进制文件可能带有的附加信息。
	具体操作指令见https://blog.csdn.net/q2519008/article/details/82349869

29.查看库是debug还是release
	readelf -S *******.so
	
30.如何进行交叉编译
	具体看https://blog.csdn.net/u010871058/article/details/71173501
	
31. windows 和linux下的内存泄漏检测
	具体链接：https://www.cnblogs.com/skynet/archive/2011/02/20/1959162.html
	
32.内存泄漏的情况分析
	1. malloc和free未成对出现。
	2. 通过局部分配的内存，未在调用者函数体内释放
	3. 在局部分配的内存未释放
	4. 由于程序运行时出现不可遇见的错误，导致程序在内存释放的函数前终止导致的内存泄漏。
	5. 不匹配使用new[] 和 delete[]
	6. delete 指针，但是没有调用对象的析构函数。导致对象没有被析构
	7. 没有将基类的析构函数定义为虚函数，当基类的指针指向子类时，delete该对象时，不会调用子类的析构函数
	参考链接：https://www.jianshu.com/p/5770c067a552
	
33 shared ptr的实现原理
	shard ptr 内部的共享一个“引用计数管理区域”，并且通过一个原子操作来保证引用计数被互斥的访问

34.enable_shared_from_this
	当啥

35. lambda 表达式

36. C++ std::condition_variable 的使用
	使用链接：	https://www.cnblogs.com/haippy/p/3252041.html
	
37.shared_ptr 的操作
	std::shared_ptr<Person> p1(new Person(1));
	std::shared_ptr<Person> p2 = std::make_shared<Person>(2);

38 std::ref

39 C++ 的using 的使用
	参考链接：https://blog.csdn.net/shift_wwx/article/details/78742459
	1.命名空间的使用。 using namespace std;
	2.在子类中引用基类的成员
	3.别名指定
		typedef std::unique_ptr<std::unordered_map<std::string, std::string>> UPtrMapSS;
		using UPtrMapSS = std::unique_ptr<std::unordered_map<std::string, std::string>>;
		
40.unique_ptr 和shared_ptr


41：git 同步远程已经删除的分支
	git remote show origin 查看本地分支和追踪情况
	git remote prune 来同步删除这些分支。

42 gdb 调试信息
	1.bt(backtrace) 打印当前函数调用栈的信息
	2.up 向下层移动栈
	3.info frame 打印当前的栈信息
	4.info args 答应当前的函数的参数与值
	5.打印当前函数中的所有局部变量与值
	6.info catch 答应当前函数中的异常处理信息

43 vim多行注释
	1. 首先按esc进入命令行模式下，按下Ctrl + v，进入列（也叫区块）模式;
	2. 在行首使用上下键选择需要注释的多行;
	3. 按下键盘（大写）“I”键，进入插入模式；
	4. 然后输入注释符（“//”、“#”等）;
	5. 最后按下“Esc”键。

44 gdb 检查内存中地址的值
	

